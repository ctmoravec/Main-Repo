Option Explicit

Sub ExportToMarkdown()
    Dim ws As Worksheet
    Dim vaultPath As String
    Dim mdFile As String
    Dim fso As Object
    Dim yaml As String, noteText As String, tableText As String
    Dim propName As String, key As String, val As String, quoteNum As String
    Dim fileName As String
    Dim tblMat As ListObject, tblQuote As ListObject
    Dim i As Long, j As Long, c As Long
    Dim rowText As String
    Dim foundCell As Range, scopeStart As Long
    Dim totalPrice As String

    '=== CONFIGURATION ===
    vaultPath = "C:\Users\CraigMoravec\Obsidian Sync Cloud\001-Work\PZ-Quote Tracker\"  'change if needed
    Const tblMaterial As String = "tblMatLines"
    Const tblLabor As String = "tblQuoteLines"
    '======================

    Set ws = ActiveWorkbook.ActiveSheet
    Set fso = CreateObject("Scripting.FileSystemObject")
    If Not fso.FolderExists(vaultPath) Then fso.CreateFolder vaultPath

    '---------------------------------------------
    ' 1?? YAML HEADER (Left Section)
    '---------------------------------------------
    yaml = "---" & vbCrLf
    For i = 1 To 15
        key = Trim(Replace(ws.Cells(i, 1).Value, ":", ""))
        val = Trim(ws.Cells(i, 2).Value)
        If key <> "" And val <> "" Then
            If LCase(key) <> "column1" And LCase(key) <> "column2" Then
                val = """" & Replace(val, """", "'") & """"
                yaml = yaml & key & ": " & val & vbCrLf
                If LCase(key) Like "*property*" Then propName = Replace(ws.Cells(i, 2).Value, ":", "")
                If LCase(key) Like "*quote*" Then quoteNum = Replace(ws.Cells(i, 2).Value, ":", "")
            End If
        End If
    Next i

  '---------------------------------------------
' 2?? ADD RIGHT PANEL (D2:D5 ? F2:F5)
'---------------------------------------------
Dim rightKeys As Variant, rightVals As Variant
rightKeys = ws.Range("D2:D5").Value
rightVals = ws.Range("F2:F5").Value

For i = 1 To UBound(rightKeys, 1)
    If Trim(rightKeys(i, 1)) <> "" And Trim(rightVals(i, 1)) <> "" Then
        Dim k As String, v As String
        k = Replace(Trim(rightKeys(i, 1)), ":", "")
        v = Trim(rightVals(i, 1))
        
        ' Special case: Hours Quoted should be a number, not currency
        If LCase(k) Like "*hours*" Then
            If IsNumeric(v) Then v = CInt(v)
        ' Format numeric or dollar values as currency
        ElseIf IsNumeric(Replace(v, "$", "")) Then
            v = Format(CDbl(Replace(v, "$", "")), "$#,##0.00")
        End If
        
        yaml = yaml & k & ": """ & v & """" & vbCrLf
    End If
Next i


'---------------------------------------------
' 3?? FIND & ADD TOTAL PRICE (robust search for formula-driven cells)
'---------------------------------------------
Dim totalCell As Range
Dim totalLabel As String
Dim totalValue As Variant
Dim cell As Range   ' required for loop

' Ensure all formulas are up to date
Application.Calculate

' Search for any cell that contains both "Total" and "Price" (case-insensitive)
For Each cell In ws.UsedRange
    If VarType(cell.Value) = vbString Then
        totalLabel = LCase(Replace(cell.Value, Chr(160), " ")) ' Replace non-breaking spaces
        If InStr(totalLabel, "total") > 0 And InStr(totalLabel, "price") > 0 Then
            Set totalCell = cell
            Exit For
        End If
    End If
Next cell

' If found, get the value from the next column or one more if merged
If Not totalCell Is Nothing Then
    totalValue = totalCell.Offset(0, 1).Value
    If IsEmpty(totalValue) Or totalValue = "" Then totalValue = totalCell.Offset(0, 2).Value
    If IsEmpty(totalValue) Or totalValue = "" Then totalValue = totalCell.Offset(1, 1).Value

    ' Clean and format
    If Not IsEmpty(totalValue) And totalValue <> "" Then
        If IsNumeric(totalValue) Then
            totalValue = Format(CDbl(totalValue), "$#,##0.00")
            yaml = yaml & "Total Price: """ & totalValue & """" & vbCrLf
        End If
    End If
End If






    '---------------------------------------------
    ' 4?? ADD DEFAULT YAML FIELDS
    '---------------------------------------------
    If propName = "" Then propName = ws.Name
    If quoteNum = "" Then quoteNum = propName

    yaml = yaml & "Date: """ & Format(Date, "yyyy-MM-dd") & """" & vbCrLf
    yaml = yaml & "Class: Quote" & vbCrLf
    yaml = yaml & "aliases: [""" & quoteNum & """]" & vbCrLf
    yaml = yaml & "tags: [work, estimates]" & vbCrLf
    yaml = yaml & "---" & vbCrLf & vbCrLf

    '---------------------------------------------
    ' 5?? MATERIAL TABLE (Filter by Total Sell Price)
    '---------------------------------------------
    tableText = ""
    On Error Resume Next
    Set tblMat = ws.ListObjects(tblMaterial)
    On Error GoTo 0

    If Not tblMat Is Nothing Then
        tableText = tableText & "## Line Items" & vbCrLf & vbCrLf

        'Header
        For j = 1 To tblMat.ListColumns.Count
            tableText = tableText & "|" & tblMat.HeaderRowRange.Cells(1, j).Value
        Next j
        tableText = tableText & "|" & vbCrLf
        'Divider
        For j = 1 To tblMat.ListColumns.Count: tableText = tableText & "|---": Next j
        tableText = tableText & "|" & vbCrLf

        Dim totalColMat As Long
        totalColMat = 0
        On Error Resume Next
        totalColMat = tblMat.ListColumns("Total Sell Price").Index
        On Error GoTo 0

        If totalColMat = 0 Then
            MsgBox "'Total Sell Price' not found in " & tblMaterial, vbExclamation
        Else
            For i = 1 To tblMat.ListRows.Count
                Dim cellVal As Variant
                cellVal = Trim(tblMat.DataBodyRange.Cells(i, totalColMat).Value)

                If cellVal <> "" And cellVal <> "-" And IsNumeric(Replace(cellVal, "$", "")) Then
                    If CDbl(Replace(cellVal, "$", "")) > 0 Then
                        For j = 1 To tblMat.ListColumns.Count
                            tableText = tableText & "|" & Replace(tblMat.DataBodyRange.Cells(i, j).Text, "|", "\|")
                        Next j
                        tableText = tableText & "|" & vbCrLf
                    End If
                End If
            Next i
        End If
        tableText = tableText & vbCrLf
    Else
        tableText = tableText & "## Material Items" & vbCrLf & "_No material items listed._" & vbCrLf & vbCrLf
    End If

    '---------------------------------------------
    ' 6?? LABOR / DEFICIENCY TABLE (No filter)
    '---------------------------------------------
    On Error Resume Next
    Set tblQuote = ws.ListObjects(tblLabor)
    On Error GoTo 0

    If Not tblQuote Is Nothing Then
        tableText = tableText & "## Totals" & vbCrLf & vbCrLf

        'Header
        For j = 1 To tblQuote.ListColumns.Count
            tableText = tableText & "|" & tblQuote.HeaderRowRange.Cells(1, j).Value
        Next j
        tableText = tableText & "|" & vbCrLf
        'Divider
        For j = 1 To tblQuote.ListColumns.Count: tableText = tableText & "|---": Next j
        tableText = tableText & "|" & vbCrLf

        'All rows
        For i = 1 To tblQuote.ListRows.Count
            For j = 1 To tblQuote.ListColumns.Count
                tableText = tableText & "|" & Replace(tblQuote.DataBodyRange.Cells(i, j).Text, "|", "\|")
            Next j
            tableText = tableText & "|" & vbCrLf
        Next i
        tableText = tableText & vbCrLf
    Else
        tableText = tableText & "## Labor / Deficiency Items" & vbCrLf & "_No labor/deficiency items listed._" & vbCrLf & vbCrLf
    End If

    '---------------------------------------------
    ' 7?? APPEND "SCOPE OF WORK"
    '---------------------------------------------
    noteText = ""
    Set foundCell = Nothing
    On Error Resume Next
    Set foundCell = ws.Cells.Find(What:="Scope of Work", LookIn:=xlValues, LookAt:=xlPart, MatchCase:=False)
    On Error GoTo 0

    If Not foundCell Is Nothing Then
        scopeStart = foundCell.Row + 1
        Dim lastUsedRow As Long
        lastUsedRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row

        For i = scopeStart To lastUsedRow
            rowText = ""
            For c = 1 To ws.Columns.Count
                If Trim(ws.Cells(i, c).Value) <> "" Then
                    If rowText <> "" Then rowText = rowText & " "
                    rowText = rowText & Trim(ws.Cells(i, c).Value)
                End If
            Next c

            If rowText <> "" Then
                If noteText = "" Then noteText = "## Scope of Work" & vbCrLf & vbCrLf
                noteText = noteText & rowText & vbCrLf
            End If
        Next i
    End If

    '---------------------------------------------
    ' 8?? BUILD FILE NAME
    '---------------------------------------------
    fileName = Trim(propName)
    If quoteNum <> "" Then fileName = fileName & " - " & Trim(quoteNum)
    fileName = Replace(fileName, "/", "-")
    fileName = Replace(fileName, "\", "-")
    fileName = Replace(fileName, ":", "-")
    fileName = Replace(fileName, "?", "")
    fileName = Replace(fileName, "*", "")
    fileName = Replace(fileName, """", "")
    fileName = Replace(fileName, "<", "")
    fileName = Replace(fileName, ">", "")
    fileName = Replace(fileName, "|", "")
    mdFile = vaultPath & fileName & ".md"

   '---------------------------------------------
' 9?? WRITE OR UPDATE FILE (UTF-8)
'---------------------------------------------
Dim stream As Object
Dim existingText As String
Dim yamlStart As Long, yamlEnd As Long
Dim preservedYaml As String
Dim updatedYaml As String
Dim fileContent As String
Dim ts As Object
Dim line As Variant
Dim newLines As String
Dim yamlLines() As String

If fso.FileExists(mdFile) Then
    ' --- File already exists: preserve YAML, update body ---
    Set ts = fso.OpenTextFile(mdFile, 1, False, -1)
    existingText = ts.ReadAll
    ts.Close

    yamlStart = InStr(existingText, "---")
    If yamlStart > 0 Then
        yamlEnd = InStr(yamlStart + 3, existingText, "---")
        If yamlEnd > 0 Then
            preservedYaml = Mid(existingText, yamlStart, yamlEnd - yamlStart + 3)
        End If
    End If

    ' --- If YAML found, selectively update key values ---
    If preservedYaml <> "" Then
        yamlLines = Split(preservedYaml, vbCrLf)
        newLines = ""

        For Each line In yamlLines
            Select Case True
                Case LCase(Left(line, 13)) = "hours quoted:"
                    line = "Hours Quoted: """ & ws.Range("F4").Value & """"  ' adjust cell reference if needed
                Case LCase(Left(line, 12)) = "labor total:"
                    line = "Labor Total: """ & Format(ws.Range("F5").Value, "$#,##0.00") & """"
                Case LCase(Left(line, 12)) = "total price:"
                    ' optional: if you later get total price working
                    line = "Total Price: """ & totalValue & """"
            End Select
            newLines = newLines & line & vbCrLf
        Next line

        updatedYaml = newLines
    Else
        updatedYaml = yaml
    End If

    ' --- Build new file content ---
    fileContent = updatedYaml & vbCrLf & vbCrLf & tableText & noteText
Else
    ' --- File does not exist: create new ---
    fileContent = yaml & tableText & noteText
End If

' --- Save to disk ---
Set stream = CreateObject("ADODB.Stream")
With stream
    .Type = 2
    .Charset = "utf-8"
    .Open
    .WriteText fileContent
    .SaveToFile mdFile, 2
    .Close
End With

MsgBox "Markdown file " & IIf(fso.FileExists(mdFile), "updated", "created") & ":" & vbCrLf & mdFile, vbInformation, "Export Complete"

End Sub
